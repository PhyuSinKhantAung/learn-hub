generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id       Int     @id @unique @default(autoincrement())
  name     String?
  email    String  @unique
  role     Role    @default(STUDENT)
  isActive Boolean @default(true)
  password String?
  googleId String? @unique

  grade Grade?

  assignmentSubmissions   AssignmentSubmission[]
  courseEnrollMents       CourseEnrollMent[]
  uploadedAssignmentFiles UploadedFile[]
}

model Course {
  id                Int                @id @unique @default(autoincrement())
  name              String
  courseDetails     String?
  courseEnrollMents CourseEnrollMent[]
  lessons           Lesson[]
}

model CourseEnrollMent {
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    Int
  courseId  Int
  role      CourseUserRole
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@index([userId])
}

model Grade {
  id     Int         @id @unique @default(autoincrement())
  status GradeStatus @default(NORMAL)
  value  Int         @default(40)
  userId Int         @unique
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lesson {
  id          Int       @id @unique @default(autoincrement())
  courseId    Int
  title       String
  description String?
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Episode     Episode[]
}

model Episode {
  id          Int            @id @unique @default(autoincrement())
  lessonId    Int
  title       String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  resources   Resource[]
  files       UploadedFile[]
  assignments Assignment[]
}

model Assignment {
  id          Int    @id @unique @default(autoincrement())
  title       String
  description String

  episodeId Int
  episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  assignmentSubmissions AssignmentSubmission[]
}

model AssignmentSubmission {
  id Int @unique @default(autoincrement())

  assignmentParagraph String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  graderBy  String?
  result    Int?
  isChecked Boolean @default(false)

  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  userId          Int
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentFiles UploadedFile[]

  @@id([userId, assignmentId])
}

model UploadedFile {
  name      String
  id        Int      @id @default(autoincrement())
  pathname  String   @unique
  episodeId Int?
  episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  type      FileType

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  assignmentSubmission             AssignmentSubmission? @relation(fields: [assignmentSubmissionUserId, assignmentSubmissionAssignmentId], references: [userId, assignmentId], onDelete: Cascade)
  assignmentSubmissionUserId       Int?
  assignmentSubmissionAssignmentId Int?
}

model Resource {
  id        Int     @id @unique @default(autoincrement())
  episodeId Int
  link      String
  episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

enum FileType {
  ASSIGNNMENT
  EPISODE
}

enum GradeStatus {
  NORMAL
  GOOD
  BAD
  EXCELLENT
}

enum CourseUserRole {
  STUDENT
  TEACHER
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
  SUPERADMIN
}
